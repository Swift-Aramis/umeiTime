//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `icon_look`.
    static let icon_look = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_look")
    /// Image `nav_icon_back`.
    static let nav_icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_back")
    /// Image `nav_icon_search`.
    static let nav_icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_search")
    /// Image `tabbar_home_normal`.
    static let tabbar_home_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_normal")
    /// Image `tabbar_home_selected`.
    static let tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_selected")
    /// Image `tabbar_mine_normal`.
    static let tabbar_mine_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_mine_normal")
    /// Image `tabbar_mine_selected`.
    static let tabbar_mine_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_mine_selected")
    /// Image `tabbar_msg_normal`.
    static let tabbar_msg_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_msg_normal")
    /// Image `tabbar_msg_selected`.
    static let tabbar_msg_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_msg_selected")
    /// Image `tabbar_murmur_normal`.
    static let tabbar_murmur_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_murmur_normal")
    /// Image `tabbar_murmur_selected`.
    static let tabbar_murmur_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_murmur_selected")
    
    /// `UIImage(named: "icon_look", bundle: ..., traitCollection: ...)`
    static func icon_look(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_look, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_back", bundle: ..., traitCollection: ...)`
    static func nav_icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_search", bundle: ..., traitCollection: ...)`
    static func nav_icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_home_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_mine_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_mine_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_mine_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_mine_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_mine_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_mine_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_msg_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_msg_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_msg_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_msg_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_msg_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_msg_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_murmur_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_murmur_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_murmur_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_murmur_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_murmur_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_murmur_selected, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `HomeListController`.
    static let homeListController = _R.nib._HomeListController()
    /// Nib `MessageController`.
    static let messageController = _R.nib._MessageController()
    /// Nib `MineController`.
    static let mineController = _R.nib._MineController()
    /// Nib `MurMurController`.
    static let murMurController = _R.nib._MurMurController()
    
    /// `UINib(name: "HomeListController", in: bundle)`
    static func homeListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeListController)
    }
    
    /// `UINib(name: "MessageController", in: bundle)`
    static func messageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageController)
    }
    
    /// `UINib(name: "MineController", in: bundle)`
    static func mineController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineController)
    }
    
    /// `UINib(name: "MurMurController", in: bundle)`
    static func murMurController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.murMurController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _HomeListController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeListController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MessageController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MineController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MineController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MurMurController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MurMurController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
