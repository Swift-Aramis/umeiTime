//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 40 images.
  struct image {
    /// Image `comment_placeholder`.
    static let comment_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment_placeholder")
    /// Image `mine_icon_atlas`.
    static let mine_icon_atlas = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon_atlas")
    /// Image `mine_icon_collect`.
    static let mine_icon_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon_collect")
    /// Image `mine_icon_praise`.
    static let mine_icon_praise = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon_praise")
    /// Image `mine_icon_setting`.
    static let mine_icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_icon_setting")
    /// Image `msg_icon_comment`.
    static let msg_icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "msg_icon_comment")
    /// Image `msg_icon_like`.
    static let msg_icon_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "msg_icon_like")
    /// Image `msg_icon_sys`.
    static let msg_icon_sys = Rswift.ImageResource(bundle: R.hostingBundle, name: "msg_icon_sys")
    /// Image `mur_arrow_down`.
    static let mur_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_arrow_down")
    /// Image `mur_arrow_right`.
    static let mur_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_arrow_right")
    /// Image `mur_icon_add`.
    static let mur_icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_add")
    /// Image `mur_icon_book`.
    static let mur_icon_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_book")
    /// Image `mur_icon_comment`.
    static let mur_icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_comment")
    /// Image `mur_icon_del`.
    static let mur_icon_del = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_del")
    /// Image `mur_icon_like`.
    static let mur_icon_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_like")
    /// Image `mur_icon_link`.
    static let mur_icon_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_link")
    /// Image `mur_icon_look`.
    static let mur_icon_look = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_look")
    /// Image `mur_icon_music`.
    static let mur_icon_music = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_music")
    /// Image `mur_icon_pause`.
    static let mur_icon_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_pause")
    /// Image `mur_icon_pic`.
    static let mur_icon_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mur_icon_pic")
    /// Image `nav_icon_back`.
    static let nav_icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_back")
    /// Image `nav_icon_class`.
    static let nav_icon_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_class")
    /// Image `nav_icon_edit`.
    static let nav_icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_edit")
    /// Image `nav_icon_friend`.
    static let nav_icon_friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_friend")
    /// Image `nav_icon_issue_green`.
    static let nav_icon_issue_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_issue_green")
    /// Image `nav_icon_issue_white`.
    static let nav_icon_issue_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_issue_white")
    /// Image `nav_icon_search`.
    static let nav_icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_icon_search")
    /// Image `tabbar_home_normal`.
    static let tabbar_home_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_normal")
    /// Image `tabbar_home_selected`.
    static let tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_selected")
    /// Image `tabbar_mine_normal`.
    static let tabbar_mine_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_mine_normal")
    /// Image `tabbar_mine_selected`.
    static let tabbar_mine_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_mine_selected")
    /// Image `tabbar_msg_normal`.
    static let tabbar_msg_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_msg_normal")
    /// Image `tabbar_msg_selected`.
    static let tabbar_msg_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_msg_selected")
    /// Image `tabbar_murmur_normal`.
    static let tabbar_murmur_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_murmur_normal")
    /// Image `tabbar_murmur_selected`.
    static let tabbar_murmur_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_murmur_selected")
    /// Image `test`.
    static let test = Rswift.ImageResource(bundle: R.hostingBundle, name: "test")
    /// Image `宽细图片.jpg`.
    static let 宽细图片Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "宽细图片.jpg")
    /// Image `电脑横屏图片`.
    static let 电脑横屏图片 = Rswift.ImageResource(bundle: R.hostingBundle, name: "电脑横屏图片")
    /// Image `窄长图片.jpg`.
    static let 窄长图片Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "窄长图片.jpg")
    /// Image `竖屏图片`.
    static let 竖屏图片 = Rswift.ImageResource(bundle: R.hostingBundle, name: "竖屏图片")
    
    /// `UIImage(named: "comment_placeholder", bundle: ..., traitCollection: ...)`
    static func comment_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon_atlas", bundle: ..., traitCollection: ...)`
    static func mine_icon_atlas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon_atlas, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon_collect", bundle: ..., traitCollection: ...)`
    static func mine_icon_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon_collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon_praise", bundle: ..., traitCollection: ...)`
    static func mine_icon_praise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon_praise, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mine_icon_setting", bundle: ..., traitCollection: ...)`
    static func mine_icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msg_icon_comment", bundle: ..., traitCollection: ...)`
    static func msg_icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msg_icon_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msg_icon_like", bundle: ..., traitCollection: ...)`
    static func msg_icon_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msg_icon_like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msg_icon_sys", bundle: ..., traitCollection: ...)`
    static func msg_icon_sys(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msg_icon_sys, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_arrow_down", bundle: ..., traitCollection: ...)`
    static func mur_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_arrow_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_arrow_right", bundle: ..., traitCollection: ...)`
    static func mur_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_add", bundle: ..., traitCollection: ...)`
    static func mur_icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_book", bundle: ..., traitCollection: ...)`
    static func mur_icon_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_book, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_comment", bundle: ..., traitCollection: ...)`
    static func mur_icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_del", bundle: ..., traitCollection: ...)`
    static func mur_icon_del(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_del, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_like", bundle: ..., traitCollection: ...)`
    static func mur_icon_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_link", bundle: ..., traitCollection: ...)`
    static func mur_icon_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_look", bundle: ..., traitCollection: ...)`
    static func mur_icon_look(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_look, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_music", bundle: ..., traitCollection: ...)`
    static func mur_icon_music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_music, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_pause", bundle: ..., traitCollection: ...)`
    static func mur_icon_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mur_icon_pic", bundle: ..., traitCollection: ...)`
    static func mur_icon_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mur_icon_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_back", bundle: ..., traitCollection: ...)`
    static func nav_icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_class", bundle: ..., traitCollection: ...)`
    static func nav_icon_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_class, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_edit", bundle: ..., traitCollection: ...)`
    static func nav_icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_friend", bundle: ..., traitCollection: ...)`
    static func nav_icon_friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_friend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_issue_green", bundle: ..., traitCollection: ...)`
    static func nav_icon_issue_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_issue_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_issue_white", bundle: ..., traitCollection: ...)`
    static func nav_icon_issue_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_issue_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_icon_search", bundle: ..., traitCollection: ...)`
    static func nav_icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_home_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_mine_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_mine_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_mine_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_mine_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_mine_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_mine_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_msg_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_msg_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_msg_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_msg_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_msg_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_msg_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_murmur_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_murmur_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_murmur_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_murmur_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_murmur_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_murmur_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "test", bundle: ..., traitCollection: ...)`
    static func test(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "宽细图片.jpg", bundle: ..., traitCollection: ...)`
    static func 宽细图片Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.宽细图片Jpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "电脑横屏图片", bundle: ..., traitCollection: ...)`
    static func 电脑横屏图片(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.电脑横屏图片, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "窄长图片.jpg", bundle: ..., traitCollection: ...)`
    static func 窄长图片Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.窄长图片Jpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "竖屏图片", bundle: ..., traitCollection: ...)`
    static func 竖屏图片(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.竖屏图片, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 17 nibs.
  struct nib {
    /// Nib `HomeArticleCell`.
    static let homeArticleCell = _R.nib._HomeArticleCell()
    /// Nib `HomeClassCell`.
    static let homeClassCell = _R.nib._HomeClassCell()
    /// Nib `HomeClassController`.
    static let homeClassController = _R.nib._HomeClassController()
    /// Nib `HomeListController`.
    static let homeListController = _R.nib._HomeListController()
    /// Nib `HomePicCell`.
    static let homePicCell = _R.nib._HomePicCell()
    /// Nib `MCommentCell`.
    static let mCommentCell = _R.nib._MCommentCell()
    /// Nib `MGroupCell`.
    static let mGroupCell = _R.nib._MGroupCell()
    /// Nib `MGroupCollectionCell`.
    static let mGroupCollectionCell = _R.nib._MGroupCollectionCell()
    /// Nib `MGroupInfoHeaderView`.
    static let mGroupInfoHeaderView = _R.nib._MGroupInfoHeaderView()
    /// Nib `MessageController`.
    static let messageController = _R.nib._MessageController()
    /// Nib `MineController`.
    static let mineController = _R.nib._MineController()
    /// Nib `MineHeaderView`.
    static let mineHeaderView = _R.nib._MineHeaderView()
    /// Nib `MsgListCell`.
    static let msgListCell = _R.nib._MsgListCell()
    /// Nib `MurmurCell`.
    static let murmurCell = _R.nib._MurmurCell()
    /// Nib `MusicContentView`.
    static let musicContentView = _R.nib._MusicContentView()
    /// Nib `ProfileView`.
    static let profileView = _R.nib._ProfileView()
    /// Nib `UserListCell`.
    static let userListCell = _R.nib._UserListCell()
    
    /// `UINib(name: "HomeArticleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeArticleCell) instead")
    static func homeArticleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeArticleCell)
    }
    
    /// `UINib(name: "HomeClassCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeClassCell) instead")
    static func homeClassCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeClassCell)
    }
    
    /// `UINib(name: "HomeClassController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeClassController) instead")
    static func homeClassController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeClassController)
    }
    
    /// `UINib(name: "HomeListController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeListController) instead")
    static func homeListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeListController)
    }
    
    /// `UINib(name: "HomePicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homePicCell) instead")
    static func homePicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homePicCell)
    }
    
    /// `UINib(name: "MCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mCommentCell) instead")
    static func mCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mCommentCell)
    }
    
    /// `UINib(name: "MGroupCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mGroupCell) instead")
    static func mGroupCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mGroupCell)
    }
    
    /// `UINib(name: "MGroupCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mGroupCollectionCell) instead")
    static func mGroupCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mGroupCollectionCell)
    }
    
    /// `UINib(name: "MGroupInfoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mGroupInfoHeaderView) instead")
    static func mGroupInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mGroupInfoHeaderView)
    }
    
    /// `UINib(name: "MessageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageController) instead")
    static func messageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageController)
    }
    
    /// `UINib(name: "MineController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineController) instead")
    static func mineController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineController)
    }
    
    /// `UINib(name: "MineHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineHeaderView) instead")
    static func mineHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineHeaderView)
    }
    
    /// `UINib(name: "MsgListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.msgListCell) instead")
    static func msgListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.msgListCell)
    }
    
    /// `UINib(name: "MurmurCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.murmurCell) instead")
    static func murmurCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.murmurCell)
    }
    
    /// `UINib(name: "MusicContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.musicContentView) instead")
    static func musicContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.musicContentView)
    }
    
    /// `UINib(name: "ProfileView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileView) instead")
    static func profileView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileView)
    }
    
    /// `UINib(name: "UserListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userListCell) instead")
    static func userListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userListCell)
    }
    
    static func homeArticleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeArticleCell? {
      return R.nib.homeArticleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeArticleCell
    }
    
    static func homeClassCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeClassCell? {
      return R.nib.homeClassCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeClassCell
    }
    
    static func homeClassController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeClassController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func homeListController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeListController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func homePicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePicCell? {
      return R.nib.homePicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePicCell
    }
    
    static func mCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MCommentCell? {
      return R.nib.mCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MCommentCell
    }
    
    static func mGroupCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupCell? {
      return R.nib.mGroupCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupCell
    }
    
    static func mGroupCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupCollectionCell? {
      return R.nib.mGroupCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupCollectionCell
    }
    
    static func mGroupInfoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupInfoHeaderView? {
      return R.nib.mGroupInfoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupInfoHeaderView
    }
    
    static func messageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mineController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mineController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mineHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineHeaderView? {
      return R.nib.mineHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineHeaderView
    }
    
    static func msgListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MsgListCell? {
      return R.nib.msgListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MsgListCell
    }
    
    static func murmurCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MurmurCell? {
      return R.nib.murmurCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MurmurCell
    }
    
    static func musicContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MusicContentView? {
      return R.nib.musicContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MusicContentView
    }
    
    static func profileView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileView? {
      return R.nib.profileView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileView
    }
    
    static func userListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserListCell? {
      return R.nib.userListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserListCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeArticleCell.validate()
      try _HomePicCell.validate()
      try _MGroupInfoHeaderView.validate()
      try _MurmurCell.validate()
      try _MusicContentView.validate()
      try _ProfileView.validate()
    }
    
    struct _HomeArticleCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeArticleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeArticleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeArticleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mur_icon_look", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_look' is used in nib 'HomeArticleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeClassCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeClassCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeClassCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeClassCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeClassController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeClassController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeListController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeListController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HomePicCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomePicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomePicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePicCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mur_icon_look", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_look' is used in nib 'HomePicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MCommentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MCommentCell
      }
      
      fileprivate init() {}
    }
    
    struct _MGroupCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MGroupCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupCell
      }
      
      fileprivate init() {}
    }
    
    struct _MGroupCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MGroupCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _MGroupInfoHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MGroupInfoHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MGroupInfoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MGroupInfoHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "test.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'test.png' is used in nib 'MGroupInfoHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MineController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MineController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MineHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MineHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MsgListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MsgListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MsgListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MsgListCell
      }
      
      fileprivate init() {}
    }
    
    struct _MurmurCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MurmurCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MurmurCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MurmurCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mur_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_arrow_down' is used in nib 'MurmurCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mur_icon_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_comment' is used in nib 'MurmurCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mur_icon_like", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_like' is used in nib 'MurmurCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mur_icon_look", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_look' is used in nib 'MurmurCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MusicContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MusicContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MusicContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MusicContentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mur_icon_pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mur_icon_pause' is used in nib 'MusicContentView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "test.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'test.png' is used in nib 'ProfileView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _UserListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserListCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
